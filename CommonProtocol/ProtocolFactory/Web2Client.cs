using AkaSerializer;
using System;

namespace CommonProtocol
{
    public static class Web2Client
    {
        // WebServer To Client
        public static byte[] SerializeProtocol(MessageType messageType, BaseProtocol protocol)
        {
            switch (messageType)
            {
                case MessageType.ServerStatus:
                    return AkaSerializer<ProtoResult>.Serialize((ProtoResult)protocol);
                case MessageType.Login:
                    return AkaSerializer<ProtoOnLogin>.Serialize((ProtoOnLogin)protocol);
                case MessageType.AccountJoin:
                    return AkaSerializer<ProtoOnLogin>.Serialize((ProtoOnLogin)protocol);
                case MessageType.LevelUp:
                    return AkaSerializer<ProtoOnLevelUp>.Serialize((ProtoOnLevelUp)protocol);
                case MessageType.SetDeck:
                    return AkaSerializer<ProtoResult>.Serialize((ProtoResult)protocol);
                case MessageType.GetDeck:
                    return AkaSerializer<ProtoOnGetDeck>.Serialize((ProtoOnGetDeck)protocol);
                case MessageType.GetBattleServer:
                    return AkaSerializer<ProtoOnGetBattleServer>.Serialize((ProtoOnGetBattleServer)protocol);
                case MessageType.InfusionBoxOpen:
                    return AkaSerializer<ProtoOnInfusionBoxOpen>.Serialize((ProtoOnInfusionBoxOpen)protocol);
                case MessageType.EnterRoom:
                    return AkaSerializer<ProtoEnterRoom>.Serialize((ProtoEnterRoom)protocol);
                case MessageType.EnterPveRoom:
                    return AkaSerializer<ProtoEnterPveRoom>.Serialize((ProtoEnterPveRoom)protocol);
                case MessageType.GetDeckWithDeckNum:
                    return AkaSerializer<ProtoOnGetDeckWithDeckNum>.Serialize((ProtoOnGetDeckWithDeckNum)protocol);
                case MessageType.GetBattleResult:
                    return AkaSerializer<ProtoOnBattleResultRankData>.Serialize((ProtoOnBattleResultRankData)protocol);
                case MessageType.GetBattleResultKnightLeague:
                    return AkaSerializer<ProtoOnBattleResultRankList>.Serialize((ProtoOnBattleResultRankList)protocol);
                case MessageType.GetBattleResultVirtualLeague:
                    return AkaSerializer<ProtoOnBattleResultRankData>.Serialize((ProtoOnBattleResultRankData)protocol);
                case MessageType.BattleReady:
                    return AkaSerializer<ProtoBattleReady>.Serialize((ProtoBattleReady)protocol);
                case MessageType.GetProducts:
                    return AkaSerializer<ProtoOnGetProducts>.Serialize((ProtoOnGetProducts)protocol);
                case MessageType.BuyProductDigital:
                    return AkaSerializer<ProtoOnBuyProductDigital>.Serialize((ProtoOnBuyProductDigital)protocol);
                case MessageType.BuyProductReal:
                    return AkaSerializer<ProtoOnBuyProductReal>.Serialize((ProtoOnBuyProductReal)protocol);
                case MessageType.GetBattleRecord:
                    return AkaSerializer<ProtoOnGetBattleRecord>.Serialize((ProtoOnGetBattleRecord)protocol); 
                case MessageType.GetBattleRecordList:
                    return AkaSerializer<ProtoOnGetBattleRecordList>.Serialize((ProtoOnGetBattleRecordList)protocol);
                case MessageType.GetVirtualRankPoint:
                case MessageType.GetRankPoint:
                    return AkaSerializer<ProtoOnRankPoint>.Serialize((ProtoOnRankPoint)protocol);
                case MessageType.GetStageLevelRoomInfo:
                    return AkaSerializer<ProtoOnGetStageLevelRoomInfo>.Serialize((ProtoOnGetStageLevelRoomInfo)protocol);
                case MessageType.SetStageLevelRoomInfo:
                    return AkaSerializer<ProtoOnSetStageLevelRoomInfo>.Serialize((ProtoOnSetStageLevelRoomInfo)protocol);
                case MessageType.SetSaveDeck:
                    return AkaSerializer<ProtoOnSetSaveDeck>.Serialize((ProtoOnSetSaveDeck)protocol);
                case MessageType.GetRankingBoard:
                case MessageType.GetRankingBoardUnit:
                    return AkaSerializer<ProtoOnRankingBoard>.Serialize((ProtoOnRankingBoard)protocol);
                case MessageType.GetRankingBoardClan:
                    return AkaSerializer<ProtoOnRankingBoardClan>.Serialize((ProtoOnRankingBoardClan)protocol);
                case MessageType.SetQuest:
                    return AkaSerializer<ProtoOnSetQuestList>.Serialize((ProtoOnSetQuestList)protocol);
                case MessageType.GetQuestList:
                    return AkaSerializer<ProtoOnGetQuestList>.Serialize((ProtoOnGetQuestList)protocol);
                case MessageType.GetFriendCode:
                case MessageType.GetClanInviteCode:
                    return AkaSerializer<ProtoInviteCode>.Serialize((ProtoInviteCode)protocol);
                case MessageType.AddFriendByCode:
                    return AkaSerializer<ProtoFriendInfo>.Serialize((ProtoFriendInfo)protocol);
                case MessageType.ClanCreate:
                    return AkaSerializer<ProtoOnClanCreate>.Serialize((ProtoOnClanCreate)protocol);
                case MessageType.RequestFriendByNickname:
                    return AkaSerializer<ProtoResultWithFriendInfo>.Serialize((ProtoResultWithFriendInfo)protocol);
                case MessageType.GetReward:
                    return AkaSerializer<ProtoOnGetReward>.Serialize((ProtoOnGetReward)protocol);
                case MessageType.GetFriendInfo:
                    return AkaSerializer<ProtoFriendInfo>.Serialize((ProtoFriendInfo)protocol);
                case MessageType.GetSquareObjectState:
                    return AkaSerializer<ProtoOnGetSquareObject>.Serialize((ProtoOnGetSquareObject)protocol);
                case MessageType.SquareObjectStart:
                    return AkaSerializer<ProtoOnSquareObjectStart>.Serialize((ProtoOnSquareObjectStart)protocol);
                case MessageType.SquareObjectStop:
                    return AkaSerializer<ProtoOnSquareObjectStop>.Serialize((ProtoOnSquareObjectStop)protocol);
                case MessageType.SquareObjectPowerInjection:
                    return AkaSerializer<ProtoOnSquareObjectPowerInject>.Serialize((ProtoOnSquareObjectPowerInject)protocol);
                case MessageType.GetUserProfile:
                    return AkaSerializer<ProtoUserProfile>.Serialize((ProtoUserProfile)protocol);
                case MessageType.GetUnitProfile:
                    return AkaSerializer<ProtoOnUnitProfile>.Serialize((ProtoOnUnitProfile)protocol);
                case MessageType.GetCardProfile:
                    return AkaSerializer<ProtoOnCardProfile>.Serialize((ProtoOnCardProfile)protocol);
                case MessageType.ChangeProfileIcon:
                case MessageType.Test:
                    return AkaSerializer<ProtoUserId>.Serialize((ProtoUserId)protocol);      
                case MessageType.GetClanRecommend:
                    return AkaSerializer<ProtoClanRecommend>.Serialize((ProtoClanRecommend)protocol);
                case MessageType.ClanJoin:
                case MessageType.ClanJoinByCode:
                    return AkaSerializer<ProtoClanJoinResult>.Serialize((ProtoClanJoinResult)protocol);
                case MessageType.GetClanProfile:
                    return AkaSerializer<ProtoClanProfile>.Serialize((ProtoClanProfile)protocol);
                case MessageType.GetClanProfileAndMembers:
                    return AkaSerializer<ProtoClanProfileAndMembers>.Serialize((ProtoClanProfileAndMembers)protocol);
                case MessageType.ClanOut:
                    return AkaSerializer<ProtoClanOutResult>.Serialize((ProtoClanOutResult)protocol);
                case MessageType.ClanSearch:
                    return AkaSerializer<ProtoClanRecommend>.Serialize((ProtoClanRecommend)protocol);                
                case MessageType.GetAdditionalUserInfo:
                    return AkaSerializer<ProtoAdditionalUserInfo>.Serialize((ProtoAdditionalUserInfo)protocol);
                case MessageType.GetSeasonReward:
                    return AkaSerializer<ProtoSeasonReward>.Serialize((ProtoSeasonReward)protocol);
                case MessageType.GetChattingMessage:
                    return AkaSerializer<ProtoOnGetChattingMessage>.Serialize((ProtoOnGetChattingMessage)protocol);
                case MessageType.GetCouponReward:
                    return AkaSerializer<ProtoGetCouponReward>.Serialize((ProtoGetCouponReward)protocol);
                case MessageType.SetChattingMessage:
                case MessageType.SkinPutOn:
                case MessageType.SetEmoticons:
                case MessageType.AddFriendByRequested:
                case MessageType.RejectFriendByRequested:
                case MessageType.RequestFriendById:
                case MessageType.RemoveFriend:
                case MessageType.UserAdditionalInfoChange:
                case MessageType.ClanBanish:
                case MessageType.ClanModifyMemberGrade:
                case MessageType.ClanProfileModify:
                case MessageType.UpdatePushKey:
                case MessageType.UpdatePushAgree:
                case MessageType.UpdateNightPushAgree:
                case MessageType.UpdateTermsAgree:
                case MessageType.SaveBattleRecordInfo:
                case MessageType.ChallengeRewardReset:
                case MessageType.EventChallengeRewardReset:
                    return AkaSerializer<ProtoResult>.Serialize((ProtoResult)protocol);
                case MessageType.SkipQuest:
                    return AkaSerializer<ProtoOnSkipCurrentQuest>.Serialize((ProtoOnSkipCurrentQuest)protocol);

                case MessageType.ReloadServerList:
                    return AkaSerializer<ProtoEmpty>.Serialize((ProtoEmpty)protocol);
                case MessageType.MailRead:
                    return AkaSerializer<ProtoMailActionResult>.Serialize((ProtoMailActionResult)protocol);
                case MessageType.MailReadAll:
                    return AkaSerializer<ProtoMailReadAllResult>.Serialize((ProtoMailReadAllResult)protocol);
                case MessageType.MailDeleteAll:
                    return AkaSerializer<ProtoMailDeleteAllResult>.Serialize((ProtoMailDeleteAllResult)protocol);
                case MessageType.MailUpdatePublic:
                    return AkaSerializer<ProtoPublicMailInfo>.Serialize((ProtoPublicMailInfo)protocol);
                case MessageType.MailUpdatePrivate:
                    return AkaSerializer<ProtoPrivateMailInfo>.Serialize((ProtoPrivateMailInfo)protocol);
                case MessageType.MailUpdateSystem:
                    return AkaSerializer<ProtoSystemMailInfo>.Serialize((ProtoSystemMailInfo)protocol);
                case MessageType.BuySeasonPass:
                    return AkaSerializer<ProtoOnBuySeasonPass>.Serialize((ProtoOnBuySeasonPass)protocol);
                case MessageType.SyncTime:
                    return AkaSerializer<ProtoOnSyncTime>.Serialize((ProtoOnSyncTime)protocol);
                case MessageType.GetSquareObjectFriends:
                    return AkaSerializer<ProtoOnGetSquareObjectFriends>.Serialize((ProtoOnGetSquareObjectFriends)protocol);
                case MessageType.SquareObjectPowerInjectionFriend:
                    return AkaSerializer<ProtoOnSquareObjectPowerInjectFriend>.Serialize((ProtoOnSquareObjectPowerInjectFriend)protocol);
                case MessageType.SquareObjectReactivate:
                    return AkaSerializer<ProtoOnSquareObjectStart>.Serialize((ProtoOnSquareObjectStart)protocol);
                case MessageType.SquareObjectBuyEnergy:
                    return AkaSerializer<ProtoOnSquareObjectBuyEnergy>.Serialize((ProtoOnSquareObjectBuyEnergy)protocol);                    
                case MessageType.NewQuest:
                    return AkaSerializer<ProtoOnNewQuest>.Serialize((ProtoOnNewQuest)protocol);
                case MessageType.EventAddFriendByCode:
                    return AkaSerializer<ProtoResult>.Serialize((ProtoResult)protocol);
                case MessageType.EventFriendGetReward:
                    return AkaSerializer<ProtoEventGetReward>.Serialize((ProtoEventGetReward)protocol);
                case MessageType.EventFriendCheck:
                    return AkaSerializer<ProtoUintAndUintList>.Serialize((ProtoUintAndUintList)protocol);
                case MessageType.StartChallenge:
                case MessageType.StartEventChallenge:
                    return AkaSerializer<ProtoOnChallenge>.Serialize((ProtoOnChallenge)protocol);
                case MessageType.GetChallengeStageList:
                    return AkaSerializer<ProtoChallengeStageList>.Serialize((ProtoChallengeStageList)protocol);
                case MessageType.GetEventChallengeStageList:
                    return AkaSerializer<ProtoEventChallengeStageList>.Serialize((ProtoEventChallengeStageList)protocol);
                case MessageType.GetChallengeFirstClearUser:
                case MessageType.GetEventChallengeFirstClearUser:
                    return AkaSerializer<ProtoOnGetDeckWithNickname>.Serialize((ProtoOnGetDeckWithNickname)protocol);
                case MessageType.GetBattleResultChallenge:
                case MessageType.GetBattleResultEventChallenge:
                    return AkaSerializer<ProtoOnBattleResult>.Serialize((ProtoOnBattleResult)protocol);
                case MessageType.BattleRoundClearChallenge:
                case MessageType.BattleRoundClearEventChallenge:
                    return AkaSerializer<ProtoEmpty>.Serialize((ProtoEmpty)protocol);
                default:
                    throw new Exception("[ProtocolFactory] Invalid Web Url Type : " + messageType);
            }
        }
    }
}
